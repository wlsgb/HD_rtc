const _ = require('lodash')
const rp = require('request-promise')
const rd = rp.defaults({ timeout: 20000, json: true, gzip: true })
const r = require('request')
const max_error_count = 5

const request = async (url) => {
    try {
        return await rd(url)
    } catch (e) {
        return
    }
}

const safe_parse = (str) => {
    try {
        return JSON.parse(str)
    } catch (e) {
        return
    }
}

const error = async (func, roomid, proxy, err_count = 0) => {
    if (++err_count > max_error_count)
        return null
    return await func(roomid, proxy, err_count)
}

const try_download = async (url) => {
    return new Promise(resolve => {
        let dl, is_resolve = false
        const go_resolve = (bl) => {
            try { dl.abort() } catch (e) { }
            if (is_resolve) return
            is_resolve = true
            resolve(bl)
        }
        dl = r({
            url: url,
            timeout: 10000,
            rejectUnauthorized: false
        }).on('data', data => {
            go_resolve(true)
        }).on('close', _ => {
            go_resolve(false)
        }).on('error', e => {
            go_resolve(false)
        })
    })
}

const get_douyu_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `http://open.douyucdn.cn/api/RoomApi/room/${roomid}`,
        proxy: proxy
    })
    if (!body || body.error)
        return await error(get_douyu_info, roomid, proxy, err_count)
    let weight = body.data.owner_weight
    if (weight.indexOf('t') > -1) {
        weight = parseFloat(weight.replace('t', '')) * 1000 * 1000
    } else if (weight.indexOf('kg') > -1) {
        weight = parseFloat(weight.replace('kg', '')) * 1000
    } else if (weight.indexOf('g') > -1) {
        weight = parseFloat(weight.replace('g', ''))
    }
    return {
        roomid: body.data.room_id + '',
        name: body.data.owner_name,
        avatar: body.data.avatar,
        category: body.data.cate_name,
        title: body.data.room_name,
        start_time: new Date(body.data.start_time).getTime(),
        show: body.data.room_status == '1' ? true : false,
        online: parseInt(body.data.online),
        weight: weight,
        follow: parseInt(body.data.fans_num),
        hot: parseInt(body.data.hn)
    }
}

const get_panda_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `https://www.panda.tv/${roomid}`,
        proxy: proxy
    })
    if (!body)
        return await error(get_panda_info, roomid, proxy, err_count)
    let start_index = body.indexOf('window._config_roominfo = ')
    let end_index = body.indexOf('window._config_roompdt')
    if (!start_index || !end_index)
        return await get_panda_info_1(roomid, proxy)
    body = body.substring(start_index + 26, end_index - 6)
    body = body.replace("'hostinfo'", '"hostinfo"')
    body = body.replace("'roominfo'", '"roominfo"')
    body = body.replace("'videoinfo'", '"videoinfo"')
    body = body.replace("'chatconfig'", '"chatconfig"')
    body = body.replace("'callbackParam'", '"callbackParam"')
    try {
        body = JSON.parse(body)
    } catch (e) {
        return await get_panda_info_1(roomid, proxy)
    }
    let follow_body = await request({
        url: `https://www.panda.tv/room_followinfo?roomid=${roomid}&_=${new Date().getTime()}`,
        proxy: proxy
    })
    if (!follow_body || follow_body.errno) {
        body.follow = 0
    } else {
        body.follow = parseInt(follow_body.data.fans)
    }
    return {
        roomid: body.roominfo.id + '',
        name: body.hostinfo.name,
        avatar: body.hostinfo.avatar,
        category: body.roominfo.classification,
        title: body.roominfo.name,
        show: body.videoinfo.status == '2' ? true : false,
        start_time: parseInt(body.roominfo.start_time) * 1000,
        end_time: parseInt(body.roominfo.end_time) * 1000,
        height: parseInt(body.hostinfo.bamboos),
        online: parseInt(body.roominfo.person_num),
        follow: body.follow
    }
}

const get_panda_info_1 = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `http://www.panda.tv/api_room_v21?token=&roomid=${roomid}&_=${new Date().getTime()}`,
        proxy: proxy
    })
    if (!body || body.errno)
        return await error(get_panda_info_1, roomid, proxy, err_count)
    let follow_body = await request({
        url: `https://www.panda.tv/room_followinfo?roomid=${roomid}&_=${new Date().getTime()}`,
        proxy: proxy
    })
    if (!follow_body || follow_body.errno) {
        body.follow = 0
    } else {
        body.follow = parseInt(follow_body.data.fans)
    }
    return {
        roomid: body.data.roominfo.id + '',
        name: body.data.hostinfo.name,
        avatar: body.data.hostinfo.avatar,
        category: body.data.roominfo.classification,
        title: body.data.roominfo.name,
        show: body.data.videoinfo.status == '2' ? true : false,
        start_time: parseInt(body.data.roominfo.start_time) * 1000,
        end_time: parseInt(body.data.roominfo.end_time) * 1000,
        height: parseInt(body.data.hostinfo.bamboos),
        online: parseInt(body.data.roominfo.person_num),
        follow: body.follow
    }
}

const get_panda_video_info = async (roomid, proxy = null, err_count = 0) => {
    let res = await get_panda_true_info(roomid, proxy, err_count)
    if (!res) return null
    return res.show
}

const get_panda_true_info = async (roomid, proxy = null, err_count = 0) => {
    let room_data = await request({
        url: `http://www.panda.tv/api_room_v21?token=&roomid=${roomid}&_=${new Date().getTime()}`,
        proxy: proxy
    })
    if (!room_data || room_data.errno || !room_data.data)
        return await error(get_panda_video_info, roomid, proxy, err_count)
    room_data = room_data.data
    let video_data = await request({
        url: `https://www.panda.tv/api_room_v3?token=&hostid=${room_data.hostinfo.rid}&roomid=${roomid}&roomkey=${room_data.videoinfo.room_key}&_=${new Date().getTime()}&param=${room_data.callbackParam.param}&time=${room_data.callbackParam.time}&sign=${room_data.callbackParam.sign}`,
        proxy: proxy
    })
    if (!video_data || video_data.errno || !video_data.data)
        return await error(get_panda_video_info, roomid, proxy, err_count)
    let plflag_list = safe_parse(video_data.data.videoinfo.plflag_list)
    if (!plflag_list)
        return await error(get_panda_video_info, roomid, proxy, err_count)
    let pl = plflag_list.main.split('_')[1]
    if (!pl)
        return await error(get_panda_video_info, roomid, proxy, err_count)
    let video_url = `https://pl${pl}.live.panda.tv/live_panda/${room_data.videoinfo.room_key}.flv?sign=${plflag_list.auth.sign}&ts=${plflag_list.auth.time}&rid=${plflag_list.auth.rid}`
    let res = await try_download(video_url)
    return {
        show: res,
        online: parseInt(room_data.roominfo.person_num)
    }
}

const get_xingyan_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `http://m.api.xingyan.panda.tv/room/baseinfo?xid=${roomid}`,
        proxy: proxy
    })
    if (!body || body.errno)
        return await error(get_xingyan_info, roomid, proxy, err_count)
    let follow_body = await request({
        url: `https://web.api.xingyan.panda.tv/room/baseinfo?xid=${roomid}&__plat=pc_web&__version=1.11.7&_=${new Date().getTime()}`,
        proxy: proxy
    })
    if (!follow_body || follow_body.errno)
        return await error(get_xingyan_info, roomid, proxy, err_count)
    let html_body = await request({
        url: `https://xingyan.panda.tv/${roomid}`,
        proxy: proxy
    })
    if (!html_body)
        return await error(get_xingyan_info, roomid, proxy, err_count)
    let host_info_array = html_body.match(/window\.HOSTINFO=(.*);<\/script>/)
    if (!host_info_array)
        return await error(get_xingyan_info, roomid, proxy, err_count)
    let host_info = safe_parse(host_info_array[1])
    if (!host_info)
        return await error(get_xingyan_info, roomid, proxy, err_count)
    return {
        roomid: body.data.roominfo.xid + '',
        name: body.data.hostinfo.nickName,
        avatar: body.data.hostinfo.avatar,
        category: '星颜',
        title: body.data.roominfo.name,
        online: parseInt(body.data.roominfo.personnum),
        star: parseInt(body.data.hostinfo.starval),
        show: body.data.roominfo.playstatus == '0' ? false : true,
        follow: parseInt(follow_body.data.fansnum),
        start_time: parseInt(host_info.roominfo.starttime) * 1000,
        end_time: ((parseInt(host_info.roominfo.endtime) * 1000) < (parseInt(host_info.roominfo.starttime) * 1000)) ? (new Date().getTime()) : (parseInt(host_info.roominfo.endtime) * 1000)
    }
}

const get_huya_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `http://www.huya.com/${roomid}`,
        proxy: proxy
    })
    if (!body)
        return await error(get_huya_info, roomid, proxy, err_count)
    let room_info_array = body.match(/var TT_ROOM_DATA = (.+);var TT_PROFILE_INFO/)
    if (!room_info_array)
        return await error(get_huya_info, roomid, proxy, err_count)
    let room_info = safe_parse(room_info_array[1])
    if (!room_info)
        return await error(get_huya_info, roomid, proxy, err_count)
    let host_info_array = body.match(/var TT_PROFILE_INFO = (.+);var TT_PLAYER_CFG/)
    if (!host_info_array)
        return await error(get_huya_info, roomid, proxy, err_count)
    let host_info = safe_parse(host_info_array[1])
    if (!host_info)
        return await error(get_huya_info, roomid, proxy, err_count)
    return {
        roomid: host_info.yyid + '',
        name: host_info.nick,
        avatar: host_info.avatar,
        category: room_info.gameFullName,
        start_time: parseInt(room_info.startTime) * 1000,
        follow: parseInt(host_info.fans),
        show: room_info.isOn,
        title: room_info.introduction,
        online: parseInt(room_info.totalCount)
    }
}

const get_longzhu_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `http://m.longzhu.com/${roomid}`,
        proxy: proxy
    })
    if (!body) {
        return await error(get_longzhu_info, roomid, proxy, err_count)
    }
    let uid_array = body.match(/var roomId = (\d+);/)
    if (!uid_array) {
        return await error(get_longzhu_info, roomid, proxy, err_count)
    }
    let id = uid_array[1]
    let info_body = await request({
        url: `http://liveapi.plu.cn/liveapp/roomstatus?roomId=${id}`,
        proxy: proxy
    })
    if (!info_body) {
        return await error(get_longzhu_info, roomid, proxy, err_count)
    }
    let room_body = await request({
        url: `http://roomapicdn.plu.cn/room/roomstatus?roomid=${id}`,
        proxy: proxy
    })
    if (!room_body) {
        return await error(get_longzhu_info, roomid, proxy, err_count)
    }
    let data = {
        roomid: roomid + '',
        name: info_body.name,
        avatar: info_body.logo,
        category: '',
        online: room_body.OnlineCount,
        flower: room_body.FlowerCount,
        follow: room_body.RoomSubscribeCount
    }
    if (room_body.Broadcast) {
        data.show = true
        data.title = room_body.Broadcast.Title
        data.category = room_body.Broadcast.GameName
        try {
            let time_array = room_body.Broadcast.BeginTime.match(/Date\((\d+)/)
            data.start_time = parseInt(time_array[1])
        } catch (e) {
            data.start_time = new Date().getTime()
        }
    } else {
        data.show = false
    }
    return data
}

const get_quanmin_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `https://www.quanmin.tv/${roomid}`,
        proxy: proxy
    })
    if (!body)
        return await error(get_quanmin_info, roomid, proxy, err_count)
    let info_array = body.match(/({"uid":.+"ignore_ad":true})/)
    if (!info_array)
        return await error(get_quanmin_info, roomid, proxy, err_count)
    let info = safe_parse(info_array[1])
    let fight = info.weight
    if (fight.indexOf('万') > -1) {
        fight = parseFloat(fight.replace('万', '')) * 10000
    }
    fight = parseFloat(fight)
    return {
        roomid: info.no + '',
        uid: info.uid,
        name: info.nick,
        avatar: info.avatar,
        category: info.category_name,
        follow: info.follow,
        show: info.play_status,
        title: info.title,
        online: info.view,
        fight: fight,
        start_time: new Date(info.play_at).getTime()
    }
}

const get_huoshan_info = async (roomid, proxy = null, err_count = 0) => {
    let body = await request({
        url: `https://hotsoon.snssdk.com/hotsoon/search/?version_code=313&device_id=${_.random(10000000000, 99999999999)}&aid=1112&q=${roomid}`,
        proxy: proxy
    })
    if (!body || body.status_code || !body.data || body.data.length === 0)
        return await error(get_huoshan_info, roomid, proxy, err_count)
    let user = body.data.find(u => u.user.short_id == roomid)
    if (!user || !user.user)
        return await error(get_huoshan_info, roomid, proxy, err_count)
    user = user.user
    let follow_body = await request({
        url: `http://reflow.huoshan.com/share/user/${user.id_str}/`,
        headers: { 'User-Agent': 'Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Mobile Safari / 537.36' },
        proxy: proxy
    })
    if (!follow_body)
        return await error(get_huoshan_info, roomid, proxy, err_count)
    let follow_array = follow_body.match(/"follower_count":(\d+),/)
    if (!follow_array)
        return await error(get_huoshan_info, roomid, proxy, err_count)
    return {
        roomid: roomid + '',
        uid: user.id_str,
        name: user.nickname,
        avatar: user.avatar_thumb.url_list[0],
        category: '火山',
        follow: parseInt(follow_array[1]),
        show: user.live_room_id ? true : false,
        title: user.signature,
        fight: user.fan_ticket_count
    }
}

const room_info = async (plat, roomid, proxy) => {
    switch (plat) {
        case 'douyu':
            return await get_douyu_info(roomid, proxy)
        case 'panda':
            return await get_panda_info(roomid, proxy)
        case 'panda_video':
            return await get_panda_video_info(roomid, proxy)
        case 'panda_true':
            return await get_panda_true_info(roomid, proxy)
        case 'xingyan':
            return await get_xingyan_info(roomid, proxy)
        case 'huya':
            return await get_huya_info(roomid, proxy)
        case 'longzhu':
            return await get_longzhu_info(roomid, proxy)
        case 'quanmin':
            return await get_quanmin_info(roomid, proxy)
        case 'huoshan':
            return await get_huoshan_info(roomid, proxy)
        default:
            return null
    }
}

module.exports = room_info